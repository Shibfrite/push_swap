/* ************************************************************************** */
/*                                                                            */
/*                                                         ::::::::           */
/*   sort.c                                              :+:    :+:           */
/*                                                      +:+                   */
/*   By: makurek <marvin@42.fr>                        +#+                    */
/*                                                    +#+                     */
/*   Created: 2025/03/27 15:58:39 by makurek        #+#    #+#                */
/*   Updated: 2025/04/02 20:12:50 by makurek        ########   odam.nl        */
/*                                                                            */
/* ************************************************************************** */

#include "push_swap.h"

void	sort_three(t_stacks *stacks, t_dnode **operations_list)
{
	int	a;
	int	b;
	int	c;

	a = *(int *)stacks->a->data;
	b = *(int *)stacks->a->next->data;
	c = *(int *)stacks->a->next->next->data;
	if (a > b && b < c && a < c)
		add_operation(operations_list, stacks, "sa", 1);
	else if (a > b && b > c)
	{
		add_operation(operations_list, stacks, "sa", 1);
		add_operation(operations_list, stacks, "rra", 1);
	}
	else if (a > b && b < c && a > c)
		add_operation(operations_list, stacks, "ra", 1);
	else if (a < b && b > c && a < c)
	{
		add_operation(operations_list, stacks, "sa", 1);
		add_operation(operations_list, stacks, "ra", 1);
	}
	else if (a < b && b > c && a > c)
		add_operation(operations_list, stacks, "rra", 1);
}

void	sort_turk(t_stacks *stacks, t_dnode **operations_list, int total)
{
	int	i;
	int	closest;

	i = total;
	while (stacks->a && i > 2)
	{
		if (stacks->b)
		{
			closest = get_closest_index(stacks->b, stacks->a);
			add_operation(operations_list, stacks, "rb", closest);
		}
		add_operation(operations_list, stacks, "pb", 1);
		i--;
	}
	while (stacks->b)
	{
		closest = get_closest_index(stacks->a, stacks->b);
		add_operation(operations_list, stacks, "ra", closest + 1);
		add_operation(operations_list, stacks, "pa", 1);
	}
	add_operation(operations_list, stacks, "ra", find_max_index(stacks->a) + 1);
}

int count_stack_size(t_dnode *stack)
{
    int count = 0;
    t_dnode *current = stack;
    while (current)
    {
        count++;
        current = current->next;
    }
    return count;
}

static void radix_sort_stack_b(t_stacks *stacks, t_dnode **operations_list, int j)
{
    int rotation_count = 0;

    printf("Starting radix_sort_stack_b for bit %d...\n", j);

    while (stacks->b && is_sorted(stacks->a) == ERROR)
    {
        printf("Stack B top: %d, Operation: ", *(int *)(stacks->b->data));
        if (((*(int *)(stacks->b->data) >> j) & 1) == 0)
        {
            printf("rb\n");
            add_operation(operations_list, stacks, "rb", 1);
            rotation_count++;

            if (rotation_count > count_stack_size(stacks->b))
            {
                printf("Forcing pa due to excessive rotations\n");
                add_operation(operations_list, stacks, "pa", 1);
                rotation_count = 0;
            }
        }
        else
        {
            printf("pa\n");
            add_operation(operations_list, stacks, "pa", 1);
            rotation_count = 0;
        }
    }
    if (is_sorted(stacks->a) == SUCCESS)
    {
        printf("Pushing remaining elements from stack B to stack A...\n");
        while (stacks->b)
        {
            add_operation(operations_list, stacks, "pa", 1);
        }
    }
}

int calculate_bit_size(int num)
{
    int	bit_size;
    
	bit_size = 0;
    while (num > 0)
	{
        num >>= 1;
        bit_size++;
    }
    return (bit_size);
}

int find_max_in_dlist(t_dnode *head)
{
    int		max_value;
    int		current_value;
    t_dnode	*current;
    if (!head)
        return (INT_MIN);
    max_value = *(int *)(head->data);
    t_dnode *current;
    while (current)
	{
        current_value = *(int *)(current->data);
        if (current_value > max_value)
            max_value = current_value;
        current = current->next;
    }
    return (max_value);
}

void radix_sort(t_stacks *stacks, t_dnode **operations_list, int total)
{
    int j;

	int bit_size = calculate_bit_size(find_max_in_dlist(stacks->a));
    printf("\n bit size: %d\n", bit_size);
    printf("\n bit size: %d\n", find_max_in_dlist(stacks->a));
    j = -1;
    while (++j <= bit_size)
    {
        int size = total;
        printf("\nProcessing bit %d...\n", j);
        while (size-- && stacks->a && is_sorted(stacks->a) == ERROR)
        {
            if (((*(int *)(stacks->a->data) >> j) & 1) == 0)
                add_operation(operations_list, stacks, "pb", 1);
            else
                add_operation(operations_list, stacks, "ra", 1);
        }
        radix_sort_stack_b(stacks, operations_list, j + 1);
    }
    while (stacks->b)
        add_operation(operations_list, stacks, "pa", 1);
}

void	sort_five(t_stacks *stacks, t_dnode **operations_list)
{
	int	closest;
	int	var;
	int	current_total;

	add_operation(operations_list, stacks, "pb", 1);
	add_operation(operations_list, stacks, "pb", 1);
	sort_three(stacks, operations_list);
	current_total = 3;
	while (stacks->b)
	{
		closest = lowest_cost_index(stacks->b, stacks->a, 2);
		add_operation(operations_list, stacks, "rb", closest);
		var = find_target_position(stacks->b, stacks->a) + 1;
		if (var <= current_total / 2)
			add_operation(operations_list, stacks, "ra", var);
		else
			add_operation(operations_list, stacks, "rra", current_total - var);
		add_operation(operations_list, stacks, "pa", 1);
		current_total++;
	}
	closest = (find_max_index(stacks->a) + 1) % current_total;
	if (closest <= current_total / 2)
		add_operation(operations_list, stacks, "ra", closest);
	else
		add_operation(operations_list, stacks, "rra", current_total - closest);
}

void	sort_any(t_stacks *stacks, int total)
{
	t_dnode	*operations_list;

	operations_list = NULL;
	if (total == 3)
		sort_three(stacks, &operations_list);
	else if (total == 5)
		sort_five(stacks, &operations_list);
	else
		radix_sort(stacks, &operations_list, total);
	optimize_operations(&operations_list);
	execute_operations(operations_list);
	ft_dlstclear(&operations_list, free_operation);
}

void	sort(int nbr_elements, t_stacks *stacks)
{
	if (is_sorted(stacks->a) == SUCCESS)
		return ;
	if (nbr_elements == 2)
	{
		ft_putendl("sa");
		sa(stacks);
		return ;
	}
	sort_any(stacks, nbr_elements);
}
